<?php
/**
 * OrderInvoiceTransactionItemDiscounts
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  JTL\SCX\Lib\Channel\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace JTL\SCX\Lib\Channel\Client\Model;

use ArrayAccess;
use JTL\SCX\Lib\Channel\Client\ObjectSerializer;

/**
 * OrderInvoiceTransactionItemDiscounts Class Doc Comment
 *
 * @category Class
 * @package  JTL\SCX\Lib\Channel\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class OrderInvoiceTransactionItemDiscounts implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderInvoiceTransactionItemDiscounts';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'discountId' => 'string',
        'totalGrossPrice' => 'float',
        'totalNetPrice' => 'float',
        'totalVatAmount' => 'float',
        'vatRate' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'discountId' => null,
        'totalGrossPrice' => 'float',
        'totalNetPrice' => 'float',
        'totalVatAmount' => 'float',
        'vatRate' => 'float'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     * @codeCoverageIgnore
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     * @codeCoverageIgnore
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'discountId' => 'discountId',
        'totalGrossPrice' => 'totalGrossPrice',
        'totalNetPrice' => 'totalNetPrice',
        'totalVatAmount' => 'totalVatAmount',
        'vatRate' => 'vatRate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'discountId' => 'setDiscountId',
        'totalGrossPrice' => 'setTotalGrossPrice',
        'totalNetPrice' => 'setTotalNetPrice',
        'totalVatAmount' => 'setTotalVatAmount',
        'vatRate' => 'setVatRate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'discountId' => 'getDiscountId',
        'totalGrossPrice' => 'getTotalGrossPrice',
        'totalNetPrice' => 'getTotalNetPrice',
        'totalVatAmount' => 'getTotalVatAmount',
        'vatRate' => 'getVatRate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     * @codeCoverageIgnore
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @codeCoverageIgnore
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @codeCoverageIgnore
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     * @codeCoverageIgnore
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }





    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['discountId'] = $data['discountId'] ?? null;
        $this->container['totalGrossPrice'] = $data['totalGrossPrice'] ?? 0.0;
        $this->container['totalNetPrice'] = $data['totalNetPrice'] ?? 0.0;
        $this->container['totalVatAmount'] = $data['totalVatAmount'] ?? 0.0;
        $this->container['vatRate'] = $data['vatRate'] ?? 0.0;
    }

    /**
     * Show all the invalid properties with reasons.
     * @codeCoverageIgnore
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['totalGrossPrice'] === null) {
            $invalidProperties[] = "'totalGrossPrice' can't be null";
        }
        if (($this->container['totalGrossPrice'] < 0.0)) {
            $invalidProperties[] = "invalid value for 'totalGrossPrice', must be bigger than or equal to 0.0.";
        }

        if ($this->container['totalNetPrice'] === null) {
            $invalidProperties[] = "'totalNetPrice' can't be null";
        }
        if (($this->container['totalNetPrice'] < 0.0)) {
            $invalidProperties[] = "invalid value for 'totalNetPrice', must be bigger than or equal to 0.0.";
        }

        if ($this->container['totalVatAmount'] === null) {
            $invalidProperties[] = "'totalVatAmount' can't be null";
        }
        if (($this->container['totalVatAmount'] < 0.0)) {
            $invalidProperties[] = "invalid value for 'totalVatAmount', must be bigger than or equal to 0.0.";
        }

        if (!is_null($this->container['vatRate']) && ($this->container['vatRate'] < 0.0)) {
            $invalidProperties[] = "invalid value for 'vatRate', must be bigger than or equal to 0.0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     * @codeCoverageIgnore
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    public function getName(): ?string
    {
        return $this->container['name'];
    }

    public function setName(?string $name): OrderInvoiceTransactionItemDiscounts
    {
        $this->container['name'] = $name;
        return $this;
    }


    public function getDiscountId(): ?string
    {
        return $this->container['discountId'];
    }

    public function setDiscountId(?string $discountId): OrderInvoiceTransactionItemDiscounts
    {
        $this->container['discountId'] = $discountId;
        return $this;
    }


    public function getTotalGrossPrice(): float
    {
        return $this->container['totalGrossPrice'];
    }

    public function setTotalGrossPrice(float $totalGrossPrice): OrderInvoiceTransactionItemDiscounts
    {
        $this->container['totalGrossPrice'] = $totalGrossPrice;
        return $this;
    }


    public function getTotalNetPrice(): float
    {
        return $this->container['totalNetPrice'];
    }

    public function setTotalNetPrice(float $totalNetPrice): OrderInvoiceTransactionItemDiscounts
    {
        $this->container['totalNetPrice'] = $totalNetPrice;
        return $this;
    }


    public function getTotalVatAmount(): float
    {
        return $this->container['totalVatAmount'];
    }

    public function setTotalVatAmount(float $totalVatAmount): OrderInvoiceTransactionItemDiscounts
    {
        $this->container['totalVatAmount'] = $totalVatAmount;
        return $this;
    }


    public function getVatRate(): ?float
    {
        return $this->container['vatRate'];
    }

    public function setVatRate(?float $vatRate): OrderInvoiceTransactionItemDiscounts
    {
        $this->container['vatRate'] = $vatRate;
        return $this;
    }

    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     * @codeCoverageIgnore
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     * @codeCoverageIgnore
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     * @codeCoverageIgnore
     */
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     * @codeCoverageIgnore
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            $this->jsonSerialize(),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     * @codeCoverageIgnore
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode($this->jsonSerialize());
    }
}
