<?php
/**
 * ModelInterface
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  JTL\SCX\Lib\Channel\Client\Model
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * JTL-Channel API
 *
 * JTL-Channel API is a REST-based API that helps a Channel Integrator to connect Marketplace with the JTL-Wawi  ERP System.  # Key Features  With the JTL-Channel API, you can:    * Describe connected Marketplace Data Structure by providing Category and Attribute Data   * Manage Product and Offer Listings   * Manage Orders    * Handle the Post Order Process  # Development Guide  There is a detailed development guide available at [GitHub](https://github.com/jtl-scx/dev-guide/blob/main/Guide/Channel-API.md).  # Changelog  ## 2024-02-26  Improved error messaging by introducing `relatedAttributeId` and `recommendedValue` properties to the  OfferListingFailedError object. These enhancements aim to provide clearer, actionable feedback to users  encountering errors, thereby improving the API's usability and integration experience.  ### Added  - `POST /v1/channel/offer/listing-failed`:     - `requestBody`: added support for `offerList`.`errorList`.`relatedAttributeId` property    - `requestBody`: added support for `offerList`.`errorList`.`recommendedValue` property  ## 2024-02-08  We've implemented an internal cleanup process that permanently removes sellers from the SCX system when they no  longer have an active subscription with JTL-Software, marked by a new permanentlyRemoved property.  ### Added  - `GET /v1/channel/event`: Added property `permanentlyRemoved` to `SellerEventSellerUnlinked`  ## 2024-01-16  Enhanced data customization options for orders and their items, offering more detailed  information handling in the JTL-Wawi.  ### Added      - `POST /v1/channel/order`:     - `requestBody`: added support for `orderList`.`items`.`additionalOrderData` property    - `requestBody`: added support for `orderList`.`items`.`orderItem`.`items`.`additionalOrderItemData` property  ## 2023-10-09  Transitioning from a single report submission method to a more flexible chunk-based approach,  allowing for the handling of larger report data more efficiently.  ### Deprecation  - deprecate `POST` `/v1/channel/report/{reportId}` in favor of `POST` `/v1/channel/report/{reportId}/data`  ### Added  - added `POST` `/v1/channel/report/{reportId}/data` - added `POST` `/v1/channel/report/{reportId}/completed`
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace JTL\SCX\Lib\Channel\Client\Model;

/**
 * Interface abstracting model access.
 *
 * @package JTL\SCX\Lib\Channel\Client\Model
 * @author  OpenAPI Generator team
 */
interface ModelInterface
{
    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName();

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes();

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats();

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     *
     * @return array
     */
    public static function attributeMap();

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters();

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters();

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array
     */
    public function listInvalidProperties();

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool
     */
    public function valid();
}
