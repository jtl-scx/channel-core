<?php
/**
 * Product
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  JTL\SCX\Lib\Channel\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SCX Channel API
 *
 * SCX Channel API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace JTL\SCX\Lib\Channel\Client\Model;

use ArrayAccess;
use JTL\SCX\Lib\Channel\Client\ObjectSerializer;

/**
 * Product Class Doc Comment
 *
 * @category Class
 * @package  JTL\SCX\Lib\Channel\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Product implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Product';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @param Price
      * @param ProductAttribute
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'sku' => 'string',
        'title' => 'string',
        'subTitle' => 'string',
        'description' => 'string',
        'gtin' => 'string',
        'mpn' => 'string',
        'isbn' => 'string',
        'brand' => 'string',
        'srp' => '\JTL\SCX\Lib\Channel\Client\Model\Price',
        'productAttributeList' => '\JTL\SCX\Lib\Channel\Client\Model\ProductAttribute[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'sku' => null,
        'title' => null,
        'subTitle' => null,
        'description' => null,
        'gtin' => null,
        'mpn' => null,
        'isbn' => null,
        'brand' => null,
        'srp' => null,
        'productAttributeList' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     * @codeCoverageIgnore
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     * @codeCoverageIgnore
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sku' => 'sku',
        'title' => 'title',
        'subTitle' => 'subTitle',
        'description' => 'description',
        'gtin' => 'gtin',
        'mpn' => 'mpn',
        'isbn' => 'isbn',
        'brand' => 'brand',
        'srp' => 'srp',
        'productAttributeList' => 'productAttributeList'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sku' => 'setSku',
        'title' => 'setTitle',
        'subTitle' => 'setSubTitle',
        'description' => 'setDescription',
        'gtin' => 'setGtin',
        'mpn' => 'setMpn',
        'isbn' => 'setIsbn',
        'brand' => 'setBrand',
        'srp' => 'setSrp',
        'productAttributeList' => 'setProductAttributeList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sku' => 'getSku',
        'title' => 'getTitle',
        'subTitle' => 'getSubTitle',
        'description' => 'getDescription',
        'gtin' => 'getGtin',
        'mpn' => 'getMpn',
        'isbn' => 'getIsbn',
        'brand' => 'getBrand',
        'srp' => 'getSrp',
        'productAttributeList' => 'getProductAttributeList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     * @codeCoverageIgnore
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @codeCoverageIgnore
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @codeCoverageIgnore
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     * @codeCoverageIgnore
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    public function __construct(array $data = null)
    {
        $this->container['sku'] = $data['sku'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
        $this->container['subTitle'] = $data['subTitle'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['gtin'] = $data['gtin'] ?? null;
        $this->container['mpn'] = $data['mpn'] ?? null;
        $this->container['isbn'] = $data['isbn'] ?? null;
        $this->container['brand'] = $data['brand'] ?? null;
        $this->container['srp'] = $data['srp'] ?? null;
        $this->container['productAttributeList'] = $data['productAttributeList'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     * @codeCoverageIgnore
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['sku'] === null) {
            $invalidProperties[] = "'sku' can't be null";
        }
        if ((mb_strlen($this->container['sku']) > 150)) {
            $invalidProperties[] = "invalid value for 'sku', the character length must be smaller than or equal to 150.";
        }

        if ((mb_strlen($this->container['sku']) < 1)) {
            $invalidProperties[] = "invalid value for 'sku', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['title']) && (mb_strlen($this->container['title']) > 512)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['title']) && (mb_strlen($this->container['title']) < 1)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['subTitle']) && (mb_strlen($this->container['subTitle']) > 1024)) {
            $invalidProperties[] = "invalid value for 'subTitle', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 50000)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 50000.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     * @codeCoverageIgnore
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    public function getSku(): string
    {
        return $this->container['sku'];
    }

    public function setSku(string $sku): Product
    {
        $this->container['sku'] = $sku;
        return $this;
    }


    public function getTitle(): ?string
    {
        return $this->container['title'];
    }

    public function setTitle(?string $title): Product
    {
        $this->container['title'] = $title;
        return $this;
    }


    public function getSubTitle(): ?string
    {
        return $this->container['subTitle'];
    }

    public function setSubTitle(?string $subTitle): Product
    {
        $this->container['subTitle'] = $subTitle;
        return $this;
    }


    public function getDescription(): ?string
    {
        return $this->container['description'];
    }

    public function setDescription(?string $description): Product
    {
        $this->container['description'] = $description;
        return $this;
    }


    public function getGtin(): ?string
    {
        return $this->container['gtin'];
    }

    public function setGtin(?string $gtin): Product
    {
        $this->container['gtin'] = $gtin;
        return $this;
    }


    public function getMpn(): ?string
    {
        return $this->container['mpn'];
    }

    public function setMpn(?string $mpn): Product
    {
        $this->container['mpn'] = $mpn;
        return $this;
    }


    public function getIsbn(): ?string
    {
        return $this->container['isbn'];
    }

    public function setIsbn(?string $isbn): Product
    {
        $this->container['isbn'] = $isbn;
        return $this;
    }


    public function getBrand(): ?string
    {
        return $this->container['brand'];
    }

    public function setBrand(?string $brand): Product
    {
        $this->container['brand'] = $brand;
        return $this;
    }


    public function getSrp(): ?Price
    {
        return $this->container['srp'];
    }

    public function setSrp(?Price $srp): Product
    {
        $this->container['srp'] = $srp;
        return $this;
    }


    public function getProductAttributeList(): ?array
    {
        return $this->container['productAttributeList'];
    }

    public function setProductAttributeList(?array $productAttributeList): Product
    {
        $this->container['productAttributeList'] = $productAttributeList;
        return $this;
    }

    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     * @codeCoverageIgnore
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     * @codeCoverageIgnore
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     * @codeCoverageIgnore
     */
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     * @codeCoverageIgnore
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            $this->jsonSerialize(),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     * @codeCoverageIgnore
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode($this->jsonSerialize());
    }
}
