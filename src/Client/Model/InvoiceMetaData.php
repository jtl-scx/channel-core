<?php
/**
 * InvoiceMetaData
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  JTL\SCX\Lib\Channel\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace JTL\SCX\Lib\Channel\Client\Model;

use ArrayAccess;
use JTL\SCX\Lib\Channel\Client\ObjectSerializer;

/**
 * InvoiceMetaData Class Doc Comment
 *
 * @category Class
 * @package  JTL\SCX\Lib\Channel\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InvoiceMetaData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'InvoiceMetaData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @param InvoiceDocumentType
      * @param Address
      * @param OrderInvoice
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => '\JTL\SCX\Lib\Channel\Client\Model\InvoiceDocumentType',
        'sellerId' => 'string',
        'orderId' => 'string',
        'invoiceNumber' => 'string',
        'originalInvoiceNumber' => 'string',
        'transactionDate' => '\DateTime',
        'taxCalculationDate' => '\DateTime',
        'transactionDetails' => 'string',
        'shipmentDate' => '\DateTime',
        'taxAddressRole' => 'string',
        'exportOutsideEu' => 'bool',
        'currency' => 'string',
        'billingAddress' => '\JTL\SCX\Lib\Channel\Client\Model\Address',
        'sellerVatNumber' => 'string',
        'buyerVatNumber' => 'string',
        'orderList' => '\JTL\SCX\Lib\Channel\Client\Model\OrderInvoice[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'sellerId' => null,
        'orderId' => null,
        'invoiceNumber' => null,
        'originalInvoiceNumber' => null,
        'transactionDate' => 'date-time',
        'taxCalculationDate' => 'date-time',
        'transactionDetails' => null,
        'shipmentDate' => 'date-time',
        'taxAddressRole' => null,
        'exportOutsideEu' => null,
        'currency' => null,
        'billingAddress' => null,
        'sellerVatNumber' => null,
        'buyerVatNumber' => null,
        'orderList' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     * @codeCoverageIgnore
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     * @codeCoverageIgnore
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'sellerId' => 'sellerId',
        'orderId' => 'orderId',
        'invoiceNumber' => 'invoiceNumber',
        'originalInvoiceNumber' => 'originalInvoiceNumber',
        'transactionDate' => 'transactionDate',
        'taxCalculationDate' => 'taxCalculationDate',
        'transactionDetails' => 'transactionDetails',
        'shipmentDate' => 'shipmentDate',
        'taxAddressRole' => 'taxAddressRole',
        'exportOutsideEu' => 'exportOutsideEu',
        'currency' => 'currency',
        'billingAddress' => 'billingAddress',
        'sellerVatNumber' => 'sellerVatNumber',
        'buyerVatNumber' => 'buyerVatNumber',
        'orderList' => 'orderList'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'sellerId' => 'setSellerId',
        'orderId' => 'setOrderId',
        'invoiceNumber' => 'setInvoiceNumber',
        'originalInvoiceNumber' => 'setOriginalInvoiceNumber',
        'transactionDate' => 'setTransactionDate',
        'taxCalculationDate' => 'setTaxCalculationDate',
        'transactionDetails' => 'setTransactionDetails',
        'shipmentDate' => 'setShipmentDate',
        'taxAddressRole' => 'setTaxAddressRole',
        'exportOutsideEu' => 'setExportOutsideEu',
        'currency' => 'setCurrency',
        'billingAddress' => 'setBillingAddress',
        'sellerVatNumber' => 'setSellerVatNumber',
        'buyerVatNumber' => 'setBuyerVatNumber',
        'orderList' => 'setOrderList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'sellerId' => 'getSellerId',
        'orderId' => 'getOrderId',
        'invoiceNumber' => 'getInvoiceNumber',
        'originalInvoiceNumber' => 'getOriginalInvoiceNumber',
        'transactionDate' => 'getTransactionDate',
        'taxCalculationDate' => 'getTaxCalculationDate',
        'transactionDetails' => 'getTransactionDetails',
        'shipmentDate' => 'getShipmentDate',
        'taxAddressRole' => 'getTaxAddressRole',
        'exportOutsideEu' => 'getExportOutsideEu',
        'currency' => 'getCurrency',
        'billingAddress' => 'getBillingAddress',
        'sellerVatNumber' => 'getSellerVatNumber',
        'buyerVatNumber' => 'getBuyerVatNumber',
        'orderList' => 'getOrderList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     * @codeCoverageIgnore
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @codeCoverageIgnore
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @codeCoverageIgnore
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     * @codeCoverageIgnore
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TAX_ADDRESS_ROLE_SHIP_FROM = 'shipFrom';
    public const TAX_ADDRESS_ROLE_SHIP_TO = 'shipTo';



    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTaxAddressRoleAllowableValues()
    {
        return [
            self::TAX_ADDRESS_ROLE_SHIP_FROM,
            self::TAX_ADDRESS_ROLE_SHIP_TO,
        ];
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    public function __construct(array $data = null)
    {
        $this->container['type'] = $data['type'] ?? null;
        $this->container['sellerId'] = $data['sellerId'] ?? null;
        $this->container['orderId'] = $data['orderId'] ?? null;
        $this->container['invoiceNumber'] = $data['invoiceNumber'] ?? null;
        $this->container['originalInvoiceNumber'] = $data['originalInvoiceNumber'] ?? null;
        $this->container['transactionDate'] = $data['transactionDate'] ?? null;
        $this->container['taxCalculationDate'] = $data['taxCalculationDate'] ?? null;
        $this->container['transactionDetails'] = $data['transactionDetails'] ?? null;
        $this->container['shipmentDate'] = $data['shipmentDate'] ?? null;
        $this->container['taxAddressRole'] = $data['taxAddressRole'] ?? null;
        $this->container['exportOutsideEu'] = $data['exportOutsideEu'] ?? null;
        $this->container['currency'] = $data['currency'] ?? null;
        $this->container['billingAddress'] = $data['billingAddress'] ?? null;
        $this->container['sellerVatNumber'] = $data['sellerVatNumber'] ?? null;
        $this->container['buyerVatNumber'] = $data['buyerVatNumber'] ?? null;
        $this->container['orderList'] = $data['orderList'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     * @codeCoverageIgnore
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['sellerId'] === null) {
            $invalidProperties[] = "'sellerId' can't be null";
        }
        if (!preg_match("/^\\w{1,50}$/", $this->container['sellerId'])) {
            $invalidProperties[] = "invalid value for 'sellerId', must be conform to the pattern /^\\w{1,50}$/.";
        }

        if ($this->container['orderId'] === null) {
            $invalidProperties[] = "'orderId' can't be null";
        }
        if ((mb_strlen($this->container['orderId']) > 150)) {
            $invalidProperties[] = "invalid value for 'orderId', the character length must be smaller than or equal to 150.";
        }

        if ((mb_strlen($this->container['orderId']) < 1)) {
            $invalidProperties[] = "invalid value for 'orderId', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['invoiceNumber'] === null) {
            $invalidProperties[] = "'invoiceNumber' can't be null";
        }
        if ((mb_strlen($this->container['invoiceNumber']) > 256)) {
            $invalidProperties[] = "invalid value for 'invoiceNumber', the character length must be smaller than or equal to 256.";
        }

        if ((mb_strlen($this->container['invoiceNumber']) < 1)) {
            $invalidProperties[] = "invalid value for 'invoiceNumber', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['transactionDate'] === null) {
            $invalidProperties[] = "'transactionDate' can't be null";
        }
        if ($this->container['taxCalculationDate'] === null) {
            $invalidProperties[] = "'taxCalculationDate' can't be null";
        }
        $allowedValues = $this->getTaxAddressRoleAllowableValues();
        if (!is_null($this->container['taxAddressRole']) && !in_array($this->container['taxAddressRole'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'taxAddressRole', must be one of '%s'",
                $this->container['taxAddressRole'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ($this->container['billingAddress'] === null) {
            $invalidProperties[] = "'billingAddress' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     * @codeCoverageIgnore
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    public function getType(): InvoiceDocumentType
    {
        return $this->container['type'];
    }

    public function setType(InvoiceDocumentType $type): InvoiceMetaData
    {
        $this->container['type'] = $type;
        return $this;
    }


    public function getSellerId(): string
    {
        return $this->container['sellerId'];
    }

    public function setSellerId(string $sellerId): InvoiceMetaData
    {
        $this->container['sellerId'] = $sellerId;
        return $this;
    }


    public function getOrderId(): string
    {
        return $this->container['orderId'];
    }

    public function setOrderId(string $orderId): InvoiceMetaData
    {
        $this->container['orderId'] = $orderId;
        return $this;
    }


    public function getInvoiceNumber(): string
    {
        return $this->container['invoiceNumber'];
    }

    public function setInvoiceNumber(string $invoiceNumber): InvoiceMetaData
    {
        $this->container['invoiceNumber'] = $invoiceNumber;
        return $this;
    }


    public function getOriginalInvoiceNumber(): ?string
    {
        return $this->container['originalInvoiceNumber'];
    }

    public function setOriginalInvoiceNumber(?string $originalInvoiceNumber): InvoiceMetaData
    {
        $this->container['originalInvoiceNumber'] = $originalInvoiceNumber;
        return $this;
    }


    public function getTransactionDate(): \DateTime
    {
        return $this->container['transactionDate'];
    }

    public function setTransactionDate(\DateTime $transactionDate): InvoiceMetaData
    {
        $this->container['transactionDate'] = $transactionDate;
        return $this;
    }


    public function getTaxCalculationDate(): \DateTime
    {
        return $this->container['taxCalculationDate'];
    }

    public function setTaxCalculationDate(\DateTime $taxCalculationDate): InvoiceMetaData
    {
        $this->container['taxCalculationDate'] = $taxCalculationDate;
        return $this;
    }


    public function getTransactionDetails(): ?string
    {
        return $this->container['transactionDetails'];
    }

    public function setTransactionDetails(?string $transactionDetails): InvoiceMetaData
    {
        $this->container['transactionDetails'] = $transactionDetails;
        return $this;
    }


    public function getShipmentDate(): ?\DateTime
    {
        return $this->container['shipmentDate'];
    }

    public function setShipmentDate(?\DateTime $shipmentDate): InvoiceMetaData
    {
        $this->container['shipmentDate'] = $shipmentDate;
        return $this;
    }


    public function getTaxAddressRole(): ?string
    {
        return $this->container['taxAddressRole'];
    }

    public function setTaxAddressRole(?string $taxAddressRole): InvoiceMetaData
    {
        $this->container['taxAddressRole'] = $taxAddressRole;
        return $this;
    }


    public function getExportOutsideEu(): ?bool
    {
        return $this->container['exportOutsideEu'];
    }

    public function setExportOutsideEu(?bool $exportOutsideEu): InvoiceMetaData
    {
        $this->container['exportOutsideEu'] = $exportOutsideEu;
        return $this;
    }


    public function getCurrency(): string
    {
        return $this->container['currency'];
    }

    public function setCurrency(string $currency): InvoiceMetaData
    {
        $this->container['currency'] = $currency;
        return $this;
    }


    public function getBillingAddress(): Address
    {
        return $this->container['billingAddress'];
    }

    public function setBillingAddress(Address $billingAddress): InvoiceMetaData
    {
        $this->container['billingAddress'] = $billingAddress;
        return $this;
    }


    public function getSellerVatNumber(): ?string
    {
        return $this->container['sellerVatNumber'];
    }

    public function setSellerVatNumber(?string $sellerVatNumber): InvoiceMetaData
    {
        $this->container['sellerVatNumber'] = $sellerVatNumber;
        return $this;
    }


    public function getBuyerVatNumber(): ?string
    {
        return $this->container['buyerVatNumber'];
    }

    public function setBuyerVatNumber(?string $buyerVatNumber): InvoiceMetaData
    {
        $this->container['buyerVatNumber'] = $buyerVatNumber;
        return $this;
    }


    public function getOrderList(): ?array
    {
        return $this->container['orderList'];
    }

    public function setOrderList(?array $orderList): InvoiceMetaData
    {
        $this->container['orderList'] = $orderList;
        return $this;
    }

    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     * @codeCoverageIgnore
     * @return void
     */
    public function offsetSet($offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     * @codeCoverageIgnore
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     * @codeCoverageIgnore
     */
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     * @codeCoverageIgnore
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            $this->jsonSerialize(),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     * @codeCoverageIgnore
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode($this->jsonSerialize());
    }
}
