<?php
/**
 * AttributeTest
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  JTL\SCX\Lib\Channel\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SCX Channel API
 *
 * SCX Channel API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace JTL\SCX\Lib\Channel\Client\Model;

use JTL\SCX\Lib\Channel\Client\AbstractApiModelTest;

/**
 * AttributeTest Class Doc Comment
 *
 * @category    Class
 * @description Attribute
 * @package     JTL\SCX\Lib\Channel\Client
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 * @covers      \JTL\SCX\Lib\Channel\Client\Model\Attribute
 */
class AttributeTest extends AbstractApiModelTest
{

    /**
     * Test allowed values for type
     * @test
     */
    public function it_has_correct_allowed_values_for_type(): void
    {
        $allowed = [
            'smalltext','htmltext','text','integer','decimal','enum','date','boolean',
        ];

        $sut = new Attribute();
        $this->assertMethodExists($sut, 'getTypeAllowableValues');
        $this->assertEquals($allowed, $sut->getTypeAllowableValues());
    }
    /**
     * @return array
     * @dataProvider
     */
    public function expectedInterface(): array
    {
        return [
            'assert property AttributeId' => [
                'attributeId',
                'string',
                'getAttributeId',
                'setAttributeId',
                false
            ],
            'assert property DisplayName' => [
                'displayName',
                'string',
                'getDisplayName',
                'setDisplayName',
                false
            ],
            'assert property IsMultipleAllowed' => [
                'isMultipleAllowed',
                'bool',
                'getIsMultipleAllowed',
                'setIsMultipleAllowed',
                false
            ],
            'assert property Type' => [
                'type',
                'string',
                'getType',
                'setType',
                false
            ],
            'assert property Values' => [
                'values',
                '\JTL\SCX\Lib\Channel\Client\Model\AllowedValue[]',
                'getValues',
                'setValues',
                true
            ],
            'assert property AttributeValueValidation' => [
                'attributeValueValidation',
                'string',
                'getAttributeValueValidation',
                'setAttributeValueValidation',
                true
            ],
            'assert property ConditionalMandatoryBy' => [
                'conditionalMandatoryBy',
                '\JTL\SCX\Lib\Channel\Client\Model\AttributeConditionalMandatoryBy[]',
                'getConditionalMandatoryBy',
                'setConditionalMandatoryBy',
                true
            ],
            'assert property ConditionalOptionalBy' => [
                'conditionalOptionalBy',
                '\JTL\SCX\Lib\Channel\Client\Model\AttributeConditionalOptionalBy[]',
                'getConditionalOptionalBy',
                'setConditionalOptionalBy',
                true
            ],
            'assert property Required' => [
                'required',
                'bool',
                'getRequired',
                'setRequired',
                false
            ],
            'assert property Recommended' => [
                'recommended',
                'bool',
                'getRecommended',
                'setRecommended',
                false
            ],
            'assert property Section' => [
                'section',
                'string',
                'getSection',
                'setSection',
                true
            ],
            'assert property SectionPosition' => [
                'sectionPosition',
                'int',
                'getSectionPosition',
                'setSectionPosition',
                false
            ],
            'assert property SubSection' => [
                'subSection',
                'string',
                'getSubSection',
                'setSubSection',
                true
            ],
            'assert property SubSectionPosition' => [
                'subSectionPosition',
                'int',
                'getSubSectionPosition',
                'setSubSectionPosition',
                false
            ],
            'assert property Description' => [
                'description',
                'string',
                'getDescription',
                'setDescription',
                true
            ],
            'assert property IsVariationDimension' => [
                'isVariationDimension',
                'bool',
                'getIsVariationDimension',
                'setIsVariationDimension',
                true
            ],
            'assert property EnumValues' => [
                'enumValues',
                'string[]',
                'getEnumValues',
                'setEnumValues',
                true
            ],
        ];
    }

    /**
     * @test
     * @dataProvider expectedInterface
     */
    public function it_has_expected_interface(string $property, string $type, string $expectedGetter, string $expectedSetter, bool $isNullable): void
    {
        $sample = $this->buildSampleForDataType($type);
        $sut = new Attribute([$property => $sample]);

        $this->assertMethodExists($sut, $expectedGetter);
        $this->assertSame($sample, $sut->$expectedGetter());

        $this->assertArrayHasKey($property, $sut);
        $this->assertSame($sample, $sut[$property]);

        $newSample = $this->buildSampleForDataType($type);
        $this->assertMethodExists($sut, $expectedSetter);
        $sut->$expectedSetter($newSample);
        $this->assertSame($newSample, $sut[$property]);

        if ($isNullable) {
            $sut = new Attribute([$property => null]);
            $this->assertNull($sut->$expectedGetter());

            $sut->$expectedSetter(null);
            $this->assertNull($sut->$expectedGetter());
        }
    }

}
