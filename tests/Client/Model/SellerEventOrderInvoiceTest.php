<?php
/**
 * SellerEventOrderInvoiceTest
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  JTL\SCX\Lib\Channel\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SCX Channel API
 *
 * SCX Channel API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace JTL\SCX\Lib\Channel\Client\Model;

use JTL\SCX\Lib\Channel\Client\AbstractApiModelTest;

/**
 * SellerEventOrderInvoiceTest Class Doc Comment
 *
 * @category    Class
 * @description SellerEventOrderInvoice
 * @package     JTL\SCX\Lib\Channel\Client
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 * @covers      \JTL\SCX\Lib\Channel\Client\Model\SellerEventOrderInvoice
 */
class SellerEventOrderInvoiceTest extends AbstractApiModelTest
{

    /**
     * @return array
     * @dataProvider
     */
    public function expectedInterface(): array
    {
        return [
            'assert property Type' => [
                'type',
                '\JTL\SCX\Lib\Channel\Client\Model\InvoiceDocumentType',
                'getType',
                'setType',
                false
            ],
            'assert property SellerId' => [
                'sellerId',
                'string',
                'getSellerId',
                'setSellerId',
                false
            ],
            'assert property OrderId' => [
                'orderId',
                'string',
                'getOrderId',
                'setOrderId',
                false
            ],
            'assert property InvoiceNumber' => [
                'invoiceNumber',
                'string',
                'getInvoiceNumber',
                'setInvoiceNumber',
                false
            ],
            'assert property DocumentId' => [
                'documentId',
                'string',
                'getDocumentId',
                'setDocumentId',
                false
            ],
            'assert property DocumentExpiresAt' => [
                'documentExpiresAt',
                '\DateTime',
                'getDocumentExpiresAt',
                'setDocumentExpiresAt',
                false
            ],
        ];
    }

    /**
     * @test
     * @dataProvider expectedInterface
     */
    public function it_has_expected_interface(string $property, string $type, string $expectedGetter, string $expectedSetter, bool $isNullable): void
    {
        $sample = $this->buildSampleForDataType($type);
        $sut = new SellerEventOrderInvoice([$property => $sample]);

        $this->assertMethodExists($sut, $expectedGetter);
        $this->assertSame($sample, $sut->$expectedGetter());

        $this->assertArrayHasKey($property, $sut);
        $this->assertSame($sample, $sut[$property]);

        $newSample = $this->buildSampleForDataType($type);
        $this->assertMethodExists($sut, $expectedSetter);
        $sut->$expectedSetter($newSample);
        $this->assertSame($newSample, $sut[$property]);

        if ($isNullable) {
            $sut = new SellerEventOrderInvoice([$property => null]);
            $this->assertNull($sut->$expectedGetter());

            $sut->$expectedSetter(null);
            $this->assertNull($sut->$expectedGetter());
        }
    }
}
